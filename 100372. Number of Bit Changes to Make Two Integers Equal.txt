You are given two positive integers n and k.

You can choose any bit in the binary representation of n that is equal to 1 and change it to 0.

Return the number of changes needed to make n equal to k. If it is impossible, return -1.

 

Example 1:

Input: n = 13, k = 4

Output: 2

Explanation:
Initially, the binary representations of n and k are n = (1101)2 and k = (0100)2.
We can change the first and fourth bits of n. The resulting integer is n = (0100)2 = k.

Example 2:

Input: n = 21, k = 21

Output: 0

Explanation:
n and k are already equal, so no changes are needed.

Example 3:

Input: n = 14, k = 13

Output: -1

Explanation:
It is not possible to make n equal to k.



solution:



class Solution {
    public int minChanges(int n, int k) {
         if (Integer.bitCount(k) > Integer.bitCount(n)) {
            return -1;
        }

        int changes = 0;

        // Iterate over each bit position
        for (int i = 0; i < 32; i++) {
            int nBit = (n >> i) & 1;
            int kBit = (k >> i) & 1;

            // If k has a bit set at a position where n doesn't, return -1
            if (kBit == 1 && nBit == 0) {
                return -1;
            }

            // If n has a bit set at a position where k doesn't, we need to change it
            if (nBit == 1 && kBit == 0) {
                changes++;
            }
        }

        return changes;
    
    }
}


