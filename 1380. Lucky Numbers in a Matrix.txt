Given an m x n matrix of distinct numbers, return all lucky numbers in the matrix in any order.

A lucky number is an element of the matrix such that it is the minimum element in its row and maximum in its column.

 

Example 1:

Input: matrix = [[3,7,8],[9,11,13],[15,16,17]]
Output: [15]
Explanation: 15 is the only lucky number since it is the minimum in its row and the maximum in its column.
Example 2:

Input: matrix = [[1,10,4,2],[9,3,8,7],[15,16,17,12]]
Output: [12]
Explanation: 12 is the only lucky number since it is the minimum in its row and the maximum in its column.
Example 3:

Input: matrix = [[7,8],[1,2]]
Output: [7]
Explanation: 7 is the only lucky number since it is the minimum in its row and the maximum in its column.





solution:



class Solution {
    public List<Integer> luckyNumbers (int[][] matrix) {
        
        int row = matrix.length;
        int col = matrix[0].length;
        
         ArrayList<Integer>min = new ArrayList<>();
         ArrayList<Integer>max = new ArrayList<>();
        List<Integer>a = new ArrayList<>();
        for (int i = 0; i <row; i++) { 
            int rmin = matrix[i][0];
            for (int j = 0; j <col; j++) { 
                rmin = Math.min(rmin,matrix[i][j]);
        }
        System.out.print(rmin);
        min.add(rmin);
    }
    System.out.println();
        for (int i = 0; i <col; i++) { 
             int cmax = matrix[0][i];
            for (int j = 0; j < row; j++) { 
                cmax = Math.max(cmax,matrix[j][i]);
                
        }
        System.out.print(cmax);
        if(min.contains(cmax)){
                    max.add(cmax);
                   break;
                }
         }
return max;
    }
}

