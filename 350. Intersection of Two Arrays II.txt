Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must appear as many times as it shows in both arrays and you may return the result in any order.

 

Example 1:

Input: nums1 = [1,2,2,1], nums2 = [2,2]
Output: [2,2]
Example 2:

Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
Output: [4,9]
Explanation: [9,4] is also accepted.



solution:



class Solution {
    public int[] intersect(int[] nums1, int[] nums2) {
      HashMap<Integer,Integer> m = new HashMap<>();
      ArrayList<Integer>j = new ArrayList<>();
      for(int i=0;i<nums1.length;i++){
        m.put(nums1[i],m.getOrDefault(nums1[i], 0)+1);
      }
      for(int i =0;i<nums2.length;i++){
        if(m.containsKey(nums2[i])){
           j.add(nums2[i]);
           m.put(nums2[i],m.getOrDefault(nums2[i],0)-1);
           if(m.get(nums2[i]) == 0){
            m.remove(nums2[i]);
           }
        }
      }
      int k = 0;
      int re[]= new int[j.size()];
      for(int a : j){
        re[k] = a;
        k++;
      }
      return re;
    }
}


<<<<<<< HEAD
You are given the head of a linked list, which contains a series of integers separated by 0's. The beginning and end of the linked list will have Node.val == 0.

For every two consecutive 0's, merge all the nodes lying in between them into a single node whose value is the sum of all the merged nodes. The modified list should not contain any 0's.

Return the head of the modified linked list.

 

Example 1:


Input: head = [0,3,1,0,4,5,2,0]
Output: [4,11]
Explanation: 
The above figure represents the given linked list. The modified list contains
- The sum of the nodes marked in green: 3 + 1 = 4.
- The sum of the nodes marked in red: 4 + 5 + 2 = 11.
Example 2:


Input: head = [0,1,0,3,0,2,2,0]
Output: [1,3,4]
Explanation: 
The above figure represents the given linked list. The modified list contains
- The sum of the nodes marked in green: 1 = 1.
- The sum of the nodes marked in red: 3 = 3.
- The sum of the nodes marked in yellow: 2 + 2 = 4.



solution:

class Solution {
    public ListNode mergeNodes(ListNode head) {
        
        ListNode t = head.next;
        
        while(t != null){
            
                int s =0;
                ListNode t2 = t;
                while(t2.val >0){
                    s = s+ t2.val;
                    t2 = t2.next;
                }
                t.val = s;
                t.next = t2.next;
                t = t2.next;
        }
        return head.next;
    }
}
=======
>>>>>>> 9ebbd2adf4a70b632228a8662fc197b82bb09c96
