Given a string s, find the length of the longest 
substring
 without repeating characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.




solution:



class Solution {
    public int lengthOfLongestSubstring(String s) {
     HashSet<Character> st = new HashSet<>();
    
       int start =0;
       int end = 0;
       int max = 0;
        if (s == null || s.equals("")) {
            return 0;
        }
       while(end < s.length()){
        if(st.add(s.charAt(end))){
            end++;
            max = Math.max(max,st.size());
        }
        else{
            st.remove(s.charAt(start));
            start++;
        }
       }
       return max; 
    }
}
 