Given an array of integers nums and an integer k. A continuous subarray is called nice if there are k odd numbers on it.

Return the number of nice sub-arrays.

 

Example 1:

Input: nums = [1,1,2,1,1], k = 3
Output: 2
Explanation: The only sub-arrays with 3 odd numbers are [1,1,2,1] and [1,2,1,1].
Example 2:

Input: nums = [2,4,6], k = 1
Output: 0
Explanation: There are no odd numbers in the array.
Example 3:

Input: nums = [2,2,2,1,2,2,1,2,2,2], k = 2
Output: 16Given an array of integers nums and an integer k. A continuous subarray is called nice if there are k odd numbers on it.

Return the number of nice sub-arrays.

 

Example 1:

Input: nums = [1,1,2,1,1], k = 3
Output: 2
Explanation: The only sub-arrays with 3 odd numbers are [1,1,2,1] and [1,2,1,1].
Example 2:

Input: nums = [2,4,6], k = 1
Output: 0
Explanation: There are no odd numbers in the array.
Example 3:

Input: nums = [2,2,2,1,2,2,1,2,2,2], k = 2
Output: 16



solution: passed soln:

class Solution {
    public int numberOfSubarrays(int[] nums, int k) {
        int l = 0;
        int h =0;
        int odd =0;
        int res = 0;
        for(int i =0;i<nums.length;i++){
            odd+= nums[i]%2;
            if(odd>k){
                h++;
                l = h;
                odd--;
            }
            while(odd==k && nums[h]%2!=1){
                h++;
            }
            if(odd==k){
                res += h-l+1;
            }
        }
        return res;
    }
}




failed soln:
class Solution {
    public int numberOfSubarrays(int[] nums, int k) {
        int l = 0;
        int h =0;
        int odd =0;
        int res = 0;
        for(int i =0;i<nums.length;i++){
            odd+= nums[i]%2;
            if(odd>k){
                h++;
                l = h;
                odd--;
            }
            while(odd==k && nums[h]%2!=1){
                h++;
            }
            if(odd==k){
                res += h-l+1;
            }
        }
        return res;
    }
}




class Solution {
    public int numberOfSubarrays(int[] nums, int k) {
        int n = nums.length;
        int c =0;
        int h[] = new int[n];
        for(int i =0;i<n;i++){
            if(nums[i]%2==1){
                c++;
                h[i]= 1;
            }
            else{
                h[i]=0;
            }
        }
        if(c<k){
            return 0;
        }
        int res = 0;
        int i =0;
        while(i<n){
            int j =i;
            int sum =0;
            while(j<n){
               sum+= h[j];
               if(sum == k){
                res++;
               }
               j++;
            }
            i++;
        }
        return res;
    }
}




class Solution {
    public int numberOfSubarrays(int[] nums, int k) {
        int n = nums.length;
        
        int res = 0;
        int i =0;
        while(i<n){
            int j =i;
            int odd =0;
            while(j<n){
               if(nums[j]%2==1){
                odd++;
               }
               if(odd == k){
                res++;
               }
               j++;
            }
            i++;
        }
        return res;
    }
}
