Given the root of a complete binary tree, return the number of the nodes in the tree.

According to Wikipedia, every level, except possibly the last, is completely filled in a complete binary tree, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.

Design an algorithm that runs in less than O(n) time complexity.

 

Example 1:


Input: root = [1,2,3,4,5,6]
Output: 6
Example 2:

Input: root = []
Output: 0
Example 3:

Input: root = [1]
Output: 1




solution:


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int findhl(TreeNode r){
        if(r == null){
            return 0;
        }
        int l =1;
        while(r.left != null){
            l++;
            r = r.left;
        }
        return l;
    }
    public int findhr(TreeNode r){
        if(r == null){
            return 0;
        }
        int l =1;
        while(r.right != null){
            l++;
            r = r.right;
        }
        return l;
    }
    public int countNodes(TreeNode root) {
        if(root == null){
            return 0;
        }
        int hl = findhl(root);
        int hr = findhr(root);
        if(hl == hr){
           return (int)Math.pow(2,hl) -1;  
        }
           return 1+countNodes(root.left)+countNodes(root.right);
    }
}



