Given a string expression representing an expression of fraction addition and subtraction, return the calculation result in string format.

The final result should be an irreducible fraction. If your final result is an integer, change it to the format of a fraction that has a denominator 1. So in this case, 2 should be converted to 2/1.

 

Example 1:

Input: expression = "-1/2+1/2"
Output: "0/1"
Example 2:

Input: expression = "-1/2+1/2+1/3"
Output: "1/3"
Example 3:

Input: expression = "1/3-1/2"
Output: "-1/6"
 

Constraints:

The input string only contains '0' to '9', '/', '+' and '-'. So does the output.
Each fraction (input and output) has the format Â±numerator/denominator. If the first input fraction or the output is positive, then '+' will be omitted.
The input only contains valid irreducible fractions, where the numerator and denominator of each fraction will always be in the range [1, 10]. If the denominator is 1, it means this fraction is actually an integer in a fraction format defined above.
The number of given fractions will be in the range [1, 10].
The numerator and denominator of the final result are guaranteed to be valid and in the range of 32-bit int.



solution:

class Solution {
    public String fractionAddition(String expression) {
        int nume = 0;  // Numerator of the result
        int deno = 1;  // Denominator of the result
        int n = expression.length();
        int i = 0;

        while (i < n) {
            int cnume = 0;  // Current fraction's numerator
            int cdeno = 0;  // Current fraction's denominator
            boolean isn = false;  // Flag for negative sign

            // Check for sign
            char ch = expression.charAt(i);
            if (ch == '+' || ch == '-') {
                if (ch == '-') {
                    isn = true;
                }
                i++;
            }

            // Parse numerator
            int st = i;
            while (i < n && Character.isDigit(expression.charAt(i))) {
                i++;
            }
            cnume = Integer.parseInt(expression.substring(st, i));
            if (isn) {
                cnume *= -1;
            }
            i++;  // Skip the '/'

            // Parse denominator
            st = i;
            while (i < n && Character.isDigit(expression.charAt(i))) {
                i++;
            }
            cdeno = Integer.parseInt(expression.substring(st, i));

            // Combine the current fraction with the result
            nume = nume * cdeno + cnume * deno;
            deno *= cdeno;
        }

        // Reduce the result to its simplest form
        int gcd = Math.abs(getGCD(nume, deno));
        nume /= gcd;
        deno /= gcd;

        // Handle the case where denominator is negative
        // if (deno < 0) {
        //     nume = -nume;
        //     deno = -deno;
        // }

        return nume + "/" + deno;
    }

    private int getGCD(int a, int b) {
        if (b == 0) {
            return a;
        }
        return getGCD(b, a % b);
    }
}
